"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABI = [
    {
        constant: true,
        inputs: [],
        name: 'initialized',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: false,
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', type: 'address' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'isOwner',
        outputs: [{ name: '', type: 'bool' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'randomnessBlockRetentionWindow',
        outputs: [{ name: '', type: 'uint256' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: '', type: 'address' }],
        name: 'commitments',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: false,
        inputs: [{ name: 'newOwner', type: 'address' }],
        name: 'transferOwnership',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        anonymous: false,
        inputs: [{ indexed: false, name: 'value', type: 'uint256' }],
        name: 'RandomnessBlockRetentionWindowSet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, name: 'previousOwner', type: 'address' },
            { indexed: true, name: 'newOwner', type: 'address' },
        ],
        name: 'OwnershipTransferred',
        type: 'event',
    },
    {
        constant: false,
        inputs: [{ name: '_randomnessBlockRetentionWindow', type: 'uint256' }],
        name: 'initialize',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: false,
        inputs: [{ name: 'value', type: 'uint256' }],
        name: 'setRandomnessBlockRetentionWindow',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: false,
        inputs: [
            { name: 'randomness', type: 'bytes32' },
            { name: 'newCommitment', type: 'bytes32' },
            { name: 'proposer', type: 'address' },
        ],
        name: 'revealAndCommit',
        outputs: [],
        payable: false,
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: 'randomness', type: 'bytes32' }],
        name: 'computeCommitment',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'pure',
        type: 'function',
    },
    {
        constant: true,
        inputs: [],
        name: 'random',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
    {
        constant: true,
        inputs: [{ name: 'blockNumber', type: 'uint256' }],
        name: 'getBlockRandomness',
        outputs: [{ name: '', type: 'bytes32' }],
        payable: false,
        stateMutability: 'view',
        type: 'function',
    },
];
function newRandom(web3, address) {
    return new web3.eth.Contract(exports.ABI, address);
}
exports.newRandom = newRandom;
//# sourceMappingURL=Random.js.map