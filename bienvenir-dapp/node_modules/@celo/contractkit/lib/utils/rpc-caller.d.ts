import { Callback, JsonRPCRequest, JsonRPCResponse, Provider } from 'web3/providers';
export declare function rpcCallHandler(payload: JsonRPCRequest, handler: (p: JsonRPCRequest) => Promise<any>, callback: Callback<JsonRPCResponse>): void;
export declare function getRandomId(): number;
export interface RpcCaller {
    call: (method: string, params: any[]) => Promise<JsonRPCResponse>;
    send: (payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>) => void;
}
export declare class DefaultRpcCaller implements RpcCaller {
    readonly provider: Provider;
    readonly jsonrpcVersion: string;
    constructor(provider: Provider, jsonrpcVersion?: string);
    call(method: string, params: any[]): Promise<JsonRPCResponse>;
    send(payload: JsonRPCRequest, callback: Callback<JsonRPCResponse>): void;
}
