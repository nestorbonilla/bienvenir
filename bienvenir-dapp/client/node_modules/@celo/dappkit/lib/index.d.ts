import { ContractKit } from '@celo/contractkit';
import { AccountAuthResponseSuccess, DappKitRequestMeta, SignTxResponseSuccess } from '@celo/utils';
import { Contact } from 'expo-contacts';
import { TransactionObject } from 'web3/eth/types';
export { AccountAuthRequest, DappKitRequestMeta, serializeDappKitRequestDeeplink, SignTxRequest, } from '@celo/utils/';
export declare function listenToAccount(callback: (account: string) => void): void;
export declare function waitForAccountAuth(requestId: string): Promise<AccountAuthResponseSuccess>;
export declare function waitForSignedTxs(requestId: string): Promise<SignTxResponseSuccess>;
export declare function listenToSignedTxs(callback: (signedTxs: string[]) => void): void;
export declare function requestAccountAddress(meta: DappKitRequestMeta): void;
export declare enum FeeCurrency {
    cUSD = "cUSD",
    cGLD = "cGLD"
}
export interface TxParams<T> {
    tx: TransactionObject<T>;
    from: string;
    to?: string;
    feeCurrency?: FeeCurrency;
    estimatedGas?: number;
    value?: string;
}
export declare function requestTxSig<T>(kit: ContractKit, txParams: TxParams<T>[], meta: DappKitRequestMeta): Promise<void>;
export interface PhoneNumberMappingEntry {
    address: string;
    phoneNumber: string;
    id: string;
    attestationStat: {
        total: number;
        completed: number;
    };
}
export interface ContactsById {
    [id: string]: Contact;
}
export interface PhoneNumberMappingEntryByAddress {
    [address: string]: PhoneNumberMappingEntry;
}
export declare function fetchContacts(kit: ContractKit): Promise<{
    rawContacts: ContactsById;
    phoneNumbersByAddress: PhoneNumberMappingEntryByAddress;
}>;
export declare function getContactForAddress(address: string, rawContacts: ContactsById, addressMapping: PhoneNumberMappingEntryByAddress): Contact | undefined;
